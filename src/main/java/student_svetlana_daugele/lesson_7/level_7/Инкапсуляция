Что такое инкапсуляция?
Где она применяется?
В чем преимущество применения такого подхода?

Инкапсуляция - это один из принципов объектно-ориентированного программирования,
который позволяет скрыть внутреннюю реализацию объекта от внешнего мира
и предоставлять доступ к объекту только через определенные интерфейсы
(методы, свойства), которые контролируют доступ к его данным.

Инкапсуляция (англ. encapsulation, от лат. in capsula) — в информатике,
процесс разделения элементов абстракций,
определяющих её структуру (данные) и поведение (методы);
инкапсуляция предназначена для изоляции
контрактных обязательств абстракции (протокол/интерфейс)
от их реализации.
На практике это означает, что класс должен состоять из двух частей: интерфейса и реализации.
В реализации большинства языков программирования (C++, C#, Java и другие)
обеспечивается механизм сокрытия, позволяющий разграничивать доступ к различным частям компонента.

Инкапсуляция играет ключевую роль в объектно-ориентированном программировании,
помогая создавать более безопасные, гибкие и управляемые программы.

Применение инкапсуляции:

Классы и объекты:
Инкапсуляция используется в определении классов и объектов.
Вы можете скрыть данные класса, делая их приватными,
и предоставить доступ к ним
только через публичные методы (геттеры и сеттеры).

Библиотеки и API:
При создании библиотек или API (интерфейсов программирования приложений)
инкапсуляция позволяет скрыть внутренние реализации от пользователей библиотеки.
Это позволяет разработчикам использовать функциональность библиотеки,
не зная, как она реализована внутри.

Преимущества инкапсуляции:

Скрытие деталей реализации:

Позволяет скрыть внутренние детали и данные объекта от внешнего мира,
что способствует безопасности и
предотвращает непосредственный доступ
к частям объекта,
которые не должны быть изменены напрямую.

Улучшение безопасности и надежности:

Инкапсуляция помогает предотвратить
нежелательное изменение данных объекта извне,
обеспечивая контролируемый доступ к этим данным через методы.

Упрощение изменений внутренней реализации:

При изменении внутренней реализации класса
(например, изменении структуры данных или логики),
публичный интерфейс остается неизменным для внешнего пользователя.
Это позволяет изменять внутренние детали объекта, не затрагивая код,
который использует этот объект.

Повышение модульности и поддерживаемости:
Инкапсуляция способствует управлению сложностью кода,
разделяя его на более маленькие части (модули),
что улучшает поддерживаемость и позволяет разработчикам легче работать с кодом.
