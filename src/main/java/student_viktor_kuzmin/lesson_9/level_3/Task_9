java.util.Optional - это класс в Java, который представляет собой контейнер,
 который может содержать или не содержать значение.

Применение объектов Optional:

-Предотвращение NullPointerException: Optional позволяет избежать NullPointerException,
предоставляя способ явно указать, что значение может отсутствовать.
-Удобная обработка возможных отсутствующих значений: Он предоставляет
 методы для удобной обработки случаев, когда значение может быть
 присутствующим или отсутствующим, таких как orElse, orElseGet, orElseThrow, ifPresent, и т. д.
-Чистый и лаконичный код: Optional может сделать код более понятным и
выразительным, позволяя программистам четко указывать, что некоторые значения могут отсутствовать.

Два состояния объектов Optional:

Присутствующее значение: Optional содержит непустое значение.
Отсутствующее значение: Optional не содержит никакого значения, его состояние пустое.

Создание экземпляров Optional:

-С использованием статического метода of(T value): Создает Optional с заданным непустым значением.
-С использованием статического метода ofNullable(T value): Создает Optional с заданным значением,
которое может быть как непустым, так и null.
-С использованием статического метода empty(): Создает пустой Optional.

Проверка состояния экземпляра Optional:

-Метод isPresent(): Возвращает true, если значение присутствует, и false в противном случае.
-Метод isEmpty() (добавлен в Java 11): Возвращает true, если значение отсутствует, и false в противном случае.

Получение объекта из Optional:

-Метод get(): Получает содержащийся внутри Optional объект. Однако он должен использоваться
с осторожностью, так как вызов этого метода для пустого Optional вызовет исключение NoSuchElementException.
-Методы orElse(T other), orElseGet(Supplier<? extends T> other),
orElseThrow(Supplier<? extends X> exceptionSupplier): Позволяют получить значение,
 если оно присутствует, иначе возвращают заданное значение или выбрасывают исключение.